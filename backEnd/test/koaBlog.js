const request = require('supertest')
require('should-http')
const app = require('../../server')

describe('路由 =>【Blog】测试套件：', function () {
  it('获取Blog列表', function (done) {
    request(app.listen())
      .get('/blog/list?page=1&limit=1')
      // .set('cookie', 'uid=1506766620306')
      .expect(200, (err, res) => {
        should.not.exist(err)
        res.body.should.be.an.Array()
        res.body.should.have.length(1)
        res.body[0].should.be.an.Object()
        res.body[0].originalFileName.should.be.a.String()
        res.body[0].date.should.be.a.String()
        res.body[0].toc.should.be.an.Array()
        res.body[0].tags.should.be.an.Array()
        res.body[0].readCount.should.be.a.Number()
        done()
      })
  })
  it('按filter获取Blog列表', function (done) {
    request(app.listen())
      .get('/blog/list?page=1&limit=10&filter=node')
      .expect(200, (err, res) => {
        should.not.exist(err)
        res.body.should.be.an.Array()
        res.body.should.have.length(1)
        res.body[0].should.be.an.Object()
        res.body[0].originalFileName.should.be.a.String()
        res.body[0].date.should.be.a.String()
        res.body[0].toc.should.be.an.Array()
        res.body[0].tags.should.be.an.Array()
        res.body[0].readCount.should.be.a.Number()
        done()
      })
  })
  it('非法参数获取Blog列表', function (done) {
    request(app.listen())
      .get('/blog/list')
      // .set('cookie', 'uid=1506766620306')
      .expect(400, done)
  })
  it('获取Blog总结', function (done) {
    request(app.listen())
      .get('/blog/summary')
      // .set('cookie', 'uid=1506766620306')
      .expect(200, (err, res) => {
        should.not.exist(err)
        res.body.should.be.an.Object()
        res.body.content.should.be.an.Object()
        res.body.content.all.should.be.a.Number()
        done()
      })
  })
  it('获取单个存在的Blog', function (done) {
    request(app.listen())
      .get('/blog/archive/blog')
      // .set('cookie', 'uid=1506766620306')
      .expect(200, (err, res) => {
        should.not.exist(err)
        res.body.should.be.an.Object()
        res.body.html.should.be.a.String()
        res.body.title.should.be.a.String()
        res.body.date.should.be.a.String()
        res.body.escapeName.should.be.a.String()
        res.body.originalFileName.should.be.a.String()
        res.body.toc.should.be.an.Array()
        res.body.tags.should.be.an.Array()
        res.body.readCount.should.be.a.Number()
        done()
      })
  })
  it('获取单个不存在的Blog', function (done) {
    request(app.listen())
      .get('/blog/archive/xxx')
      // .set('cookie', 'uid=1506766620306')
      .expect(204, done)
  })
  it('非法参数获取Blog', function (done) {
    request(app.listen())
      .get('/blog/archive/x xx')
      // .set('cookie', 'uid=1506766620306')
      .expect(400, done)
  })
  it('获取Blog图片文件夹信息', function (done) {
    request(app.listen())
      .get('/blog/imageInfo')
      .expect(200, (err, res) => {
        should.not.exist(err)
        res.body.should.be.an.Object()
        res.body.total.should.be.a.Number()
        res.body.count.should.be.a.Number()
        done()
      })
  })
  it('向图床添加一个图片', function (done) {
    request(app.listen())
      .post('/blog/imageUpload')
      .set('cookie', 'uid=1506766620306')
      .set('source', 'blog')
      .attach('photos', 'backEnd/Screenshot.png')
      .expect(200, (err, res) => {
        should.not.exist(err)
        res.body.should.be.an.Array()
        res.body[0].originName.should.be.a.String()
        res.body[0].path.should.be.a.String()
        res.body[0].size.should.be.a.Number()
        done()
      })
  })
})